import json
import pandas as pd
import altair as alt
import matplotlib.pyplot as plt
import plotly as Plotly

import streamlit as st
from dotenv import load_dotenv
from sqlmodel import Session, select
import services.database as db

import os

from services.utils import gpt3_completion

load_dotenv()

title = "Queries in natural language"
styles = """
            <style>
            .green { color: green }
            .red { color: red }
            .bold { font-weight: bold }
            </style>
            """
st.markdown(styles, unsafe_allow_html=True)
st.header(title)

st.write("#### Scenario")
st.write("In this scenario, a user can describe the query in natural language. The query will then be converted to SQL code by Azure OpenAI and executed against a SQL database")

st.write("#### Sample queries")

context = '''
### SQL server tables, with their properties:
#
# SalesLT.ProductCategory(ProductCategoryID, ParentProductCategoryID, Name, rowguid, ModifiedDate)
# SalesLT.SalesOrderDetail(SalesOrderID, SalesOrderDetailID, OrderQty, ProductID, UnitPrice, UnitPriceDiscount, LineTotal, rowguid, ModifiedDate)
# SalesLT.Product(ProductID, Name, ProductNumber, Color, StandardCost, ListPrice, [Size], Weight, ProductCategoryID, ProductModelID, SellStartDate, SellEndDate, DiscontinuedDate, ThumbNailPhoto, ThumbnailPhotoFileName, rowguid, ModifiedDate)
#'''
sample_queries = [
    "How many products are there in each category?",
    "What is the total sales for each product category, ordered by total sales?",
    "Donne-moi le total des ventes de produits par catégorie, ordonné du plus grand au plus petit",
    "Give me a list of the top 5 categories (id, name and count) where there are more than 10 products, from larger to smaller"
]
st.json(sample_queries, expanded = False)
search_text = st.text_input("What's your interest?", placeholder="Describe what you want me to do")

#   
if st.button("Run query"):

    st.write("#### SQL code generated by Azure OpenAI - text-davinci-003:")
    stmt = gpt3_completion(search_text, temp=0, context=context)
    with Session(db.engine) as session: 
        st.code(stmt, language="sql")
        result = session.exec(stmt).all()

        # generate the HTML table using streamlit.components.v1.html
        table = '<table><thead><tr>'
        for column in result[0].keys():
            table += f'<th>{column}</th>'
        table += '</tr></thead><tbody>'
        for row in result:
            table += '<tr>'
            for i in range(len(row)):
                table += f'<td>{row[i]}</td>'
            table += '</tr>'
        table += '</tbody></table>'
        st.markdown(table, unsafe_allow_html=True)
