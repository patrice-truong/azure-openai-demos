import json
import pandas as pd
import altair as alt
import matplotlib.pyplot as plt
import plotly as Plotly

import streamlit as st
from dotenv import load_dotenv
from sqlmodel import Session, select
from services.data import post_data
import services.database as db

import os

from services.utils import gpt3_completion

load_dotenv()

title = "Query Cosmos DB for Gremlin"
styles = """
            <style>
            .green { color: green }
            .red { color: red }
            .bold { font-weight: bold }
            </style>
            """
st.markdown(styles, unsafe_allow_html=True)
st.header(title)

st.write("#### Sample queries")

context = '''
You are an assistant to a data scientist. You are given a graph database with nodes and edges. You are asked to write queries that answer user requests in natural language. The query should be written in Gremlin.

Here is an example of the queries used to populate the graph database:
g.V().drop()
g.addV('PU').property('id', 'PU_RE22_019').property('name', 'PU_RE22_019').property('nickname', '').property('mileage', 1).property('project', 'RE22').property('pk', 'PU_RE22_019')
g.addV('PU').property('id', 'PU_RE22_039').property('name', 'PU_RE22_039').property('nickname', '').property('mileage', 2).property('project', 'RE22').property('pk', 'PU_RE22_039')
g.addV('PU').property('id', 'PU_RE22_041').property('name', 'PU_RE22_41').property('nickname', '').property('mileage', 3).property('project', 'RE22').property('pk', 'PU_RE22_41')
g.addV('PU').property('id', 'PU_RE22_038').property('name', 'PU_RE22_038').property('nickname', 'RE22_BEN014').property('mileage', 4).property('project', 'RE22').property('pk', 'PU_RE22_038')
g.addV('Element').property('id', 'TT0222-027').property('name', 'TT0222-027').property('mileage', 12).property('pk', 'TT0222-027')
g.addV('Element').property('id', 'TT0222-015').property('name', 'TT0222-015').property('mileage', 13).property('pk', 'TT0222-015')
g.addV('Element').property('id', 'TT0021-104').property('name', 'TT0021-104').property('mileage', 22).property('pk', 'TT0021-104')
g.addV('Part').property('id', 'HTV02317').property('name', 'HTV02317').property('Type', 'Carter Support RTT').property('pk', 'HTV02317')
g.V('PU_RE22_019').addE('contains').to(g.V('TT0222-027'))
g.V('PU_RE22_039').addE('contains').to(g.V('TT0222-027'))
g.V('PU_RE22_041').addE('contains').to(g.V('TT0222-027'))
g.V('PU_RE22_038').addE('contains').to(g.V('TT0222-027')).property('StartTime', '2022-02-08 00:00:00').property('Endtime', '2022-06-14 00:00:00')
g.V('PU_RE22_038').addE('contains').to(g.V('TT0222-015')).property('StartTime', '2022-06-15 00:00:00').property('Endtime', '2022-06-21 00:00:00')
g.V('TT0222-015').addE('contains').to(g.V('HTV02317')).property('StartTime', '2022-01-10 00:00:00').property('Endtime', '2022-06-21 00:00:00')
g.V('TT0021-104').addE('contains').to(g.V('HTV02317')).property('StartTime', '2022-09-06 00:00:00')
'''
sample_queries = [
    "Count the number of nodes in the graph",
    "Get everything related to element TT0222-027",
    "Get all parts with a StartTime before 2022-06-01",
    "Get all parts with a StartTime between 2022-01-01 and 2022-12-31"
]
st.json(sample_queries, expanded = False)
search_text = st.text_input("Your query:", placeholder="Describe what you want me to do")

def execute_query(query):
    return post_data("/cosmosdb_gremlin/v1/execute_query", json.dumps(query))

#   
if st.button("Run query"):

    st.write("#### Gremlin code generated by Azure OpenAI - text-davinci-003:")
    query_text = gpt3_completion(search_text, temp=0, context=context)
    st.code(query_text, language="Gremlin")
    result = execute_query({"Text": query_text})
    st.write(result.json())
    
